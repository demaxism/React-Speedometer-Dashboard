[{"/mnt/c/Projects/react/my-app/src/index.js":"1","/mnt/c/Projects/react/my-app/src/reportWebVitals.js":"2","/mnt/c/Projects/react/my-app/src/components/App/App.js":"3","/mnt/c/Projects/react/my-app/src/components/Instructions/Instructions.js":"4","/mnt/c/Projects/react/my-app/src/components/Meter/Meter.js":"5","/mnt/c/Projects/react/my-app/src/components/Drawer/Drawer.js":"6"},{"size":515,"mtime":1608009550385,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607925769723,"results":"9","hashOfConfig":"8"},{"size":1385,"mtime":1608103780310,"results":"10","hashOfConfig":"8"},{"size":387,"mtime":1608019381779,"results":"11","hashOfConfig":"8"},{"size":5341,"mtime":1608080866662,"results":"12","hashOfConfig":"8"},{"size":5060,"mtime":1608156098460,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"mcull9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Projects/react/my-app/src/index.js",[],["29","30"],"/mnt/c/Projects/react/my-app/src/reportWebVitals.js",[],"/mnt/c/Projects/react/my-app/src/components/App/App.js",["31"],"import React, {useState} from 'react';\nimport Instructions from '../Instructions/Instructions';\nimport Meter from '../Meter/Meter';\nimport Drawer from '../Drawer/Drawer';\nimport './App.css';\n\nconst displayEmojiName = event => alert(event.target.id);\nconst emojis = [\n  {\n    emoji: 'ðŸ˜€',\n    name: \"test grinning face\"\n  },\n  {\n    emoji: 'ðŸŽ‰',\n    name: \"party popper\"\n  },\n  {\n    emoji: 'ðŸ’ƒ',\n    name: \"woman dancing\"\n  }\n];\n\nfunction App() {\n  const greeting = \"greeting\";\n  const displayAction = false;\n  let memberCount = 0;\n\n  const [count, setCount] = useState(0);\n\n  return(\n    <div className=\"container\">\n      <h1 id={greeting}>Hello, World</h1>\n      {displayAction && <p>I am writing JSX</p>}\n      <Instructions cname='demax'/>\n      <Drawer />\n      <ul>\n        {\n          emojis.map(emoji => (\n            <li key={emoji.name}>\n              <button\n                onClick={displayEmojiName}\n              >\n                <span role=\"img\" aria-label={emoji.name} id={emoji.name}>{emoji.emoji}</span>\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n      <p>count: {count} times.</p>\n      <button onClick={ ()=> setCount(count + 1)}>click me</button>\n      <p>memberCount: {memberCount}</p>\n      <button className='blueBtn' onClick={ ()=> memberCount = memberCount + 1 }>M_Click</button>\n    </div>\n  )\n}\n\nexport default App;\n","/mnt/c/Projects/react/my-app/src/components/Instructions/Instructions.js",[],"/mnt/c/Projects/react/my-app/src/components/Meter/Meter.js",["32","33"],"import React, { Component } from 'react';\r\nimport './Meter.css';\r\nlet d3 = window.d3;\r\n\r\nexport default class Meter extends Component {\r\n\r\n  componentDidMount() {\r\n    var percent = 65;\r\n    var oldValue=0;\r\n    var ratio=percent/100;\r\n    var glowRadius = 25;\r\n\r\n    var w=300,h=300;\r\n    var outerRadius=(w/2)-50;\r\n    var innerRadius=outerRadius - 30;\r\n\r\n    var arc=d3.svg.arc()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius)\r\n      .startAngle(0)\r\n      .endAngle(2*Math.PI);\r\n\r\n    var arcLine=d3.svg.arc()\r\n      .innerRadius(innerRadius)\r\n      .outerRadius(outerRadius)\r\n      .cornerRadius(glowRadius)\r\n      .startAngle(-0.05);\r\n\r\n    var arcGuide=d3.svg.arc()\r\n      .innerRadius(innerRadius + 14)\r\n      .outerRadius(innerRadius + 15)\r\n      .cornerRadius(10)\r\n      .startAngle(-0.05);\r\n\r\n    var svg=d3.select('#chart')\r\n      .append(\"svg\")\r\n      .attr({\r\n          width:w,\r\n          height:h\r\n      }).append('g')\r\n      .attr({\r\n          transform:'translate('+w/2+','+h/2+')'\r\n      });\r\n\r\n    svg.append('defs')\r\n      .html(`\r\n          <filter id=\"shadow\">\r\n              <feDropShadow dx=\"2\" dy=\"2\" stdDeviation=\"10\"/>\r\n          </filter>\r\n          <radialGradient id=\"grayGradient\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" stop-color=\"#051219\"></stop>\r\n              <stop offset=\"100%\" stop-color=\"#051219\"></stop>\r\n          </radialGradient>\r\n          <linearGradient id=\"gradient\" x2=\"0%\" y2=\"100%\">\r\n              <stop offset=\"0%\" stop-color=\"#CA011F\"></stop>\r\n              <stop offset=\"100%\" stop-color=\"#f14254\"></stop>\r\n          </linearGradient>\r\n        <filter id=\"dropGlow\" height=\"3100%\" width=\"3100%\">\r\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\"/>\r\n          <feColorMatrix\r\n          type = \"matrix\"\r\n          values=\"0.95     0     0     0     0\r\n                  0     0.26     0     0     0\r\n                  0     0     0.33     0     0\r\n                  0     0     0     1     0 \"/>\r\n          <feOffset in=\"bluralpha\" dx=\"0.000000\" dy=\"0.000000\" result=\"offsetBlur\"/>\r\n          <feMerge>\r\n              <feMergeNode in=\"offsetBlur\"/>\r\n              <feMergeNode in=\"SourceGraphic\"/>\r\n          </feMerge>\r\n        </filter>\r\n      <filter id=\"softGlow\" height=\"100\" width=\"100\" x=\"-1000%\" y=\"-1000%\">\r\n        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"20\"></feGaussianBlur>\r\n      </filter>\r\n      `);\r\n\r\n    var pathBackground=svg.append('path')\r\n      .attr({\r\n          d:arc\r\n      })\r\n      .style({\r\n          fill:'url(#grayGradient)',\r\n          filter: 'url(#shadow)'\r\n      });\r\n\r\n    var pathForeground=svg.append('path')\r\n      .datum({endAngle:0})\r\n      .attr({\r\n          d: arcLine,\r\n          id: 'arcguide'\r\n      })\r\n      .style({\r\n        // fill: '#f14254',\r\n        fill:'url(#gradient)',\r\n        filter: 'url(#dropGlow)',\r\n      });\r\n\r\n    var pathLine=svg.append('path')\r\n      .datum({endAngle:0})\r\n      .attr({\r\n          d:arcGuide,\r\n          id: 'lineguide'\r\n      })\r\n      .style({\r\n        // fill:'#f36272',\r\n        fill:'transparent',\r\n      });\r\n\r\n    var marker = svg.append('circle');\r\n    marker.attr('r', glowRadius)\r\n        .attr({\r\n          'id': 'glowMarker',\r\n          'fill':'#eb384b',\r\n          'filter':'url(#softGlow)'\r\n          });\r\n\r\n    var textCounter=svg.append('text')\r\n      .datum(0)\r\n      .text(function(d){\r\n          return d+'%';\r\n      })\r\n      .attr({\r\n          class:'counterText',\r\n          'text-anchor':'middle',\r\n          'alignment-baseline': 'middle'\r\n      })\r\n      .style({\r\n          fill:'#fff',\r\n          'font-size':'50px'\r\n      });\r\n\r\n    var arcTween=function(transition, newValue, oldValue) {\r\n      transition.attrTween(\"d\", function (d) {\r\n        var interpolate = d3.interpolate(d.endAngle, ((2*Math.PI))*(newValue/100));\r\n        var interpolateCount = d3.interpolate(oldValue, newValue);\r\n        \r\n        return function (t) {\r\n          d.endAngle = interpolate(t);\r\n          textCounter.text(Math.floor(interpolateCount(t))+'%');\r\n          return arcLine(d);\r\n        };\r\n      });\r\n    };\r\n\r\n    var arcTweenGuide=function(transition, newValue, oldValue) {\r\n      transition.attrTween(\"d\", function (d) {\r\n        var interpolate = d3.interpolate(d.endAngle, ((2*Math.PI))*(newValue/100));\r\n        return function (t) {\r\n          d.endAngle = interpolate(t);\r\n          \r\n          var path = svg.select('path#lineguide');\r\n          var length = path.node().getTotalLength();\r\n          var pathPoint = path.node().getPointAtLength((length/2) + (glowRadius/2));\r\n          var marker = d3.select('#glowMarker');\r\n          marker.attr('transform', `translate(${pathPoint.x}, ${(pathPoint.y)})`);\r\n          \r\n          return arcGuide(d);\r\n        };\r\n      });\r\n    };\r\n\r\n\r\n    var animate=function() {\r\n      pathForeground.transition()\r\n        .duration(1200)\r\n        .ease('quad')\r\n        .call(arcTween,percent,oldValue);\r\n      \r\n      pathLine.transition()\r\n        .duration(1200)\r\n        .ease('quad')\r\n        .call(arcTweenGuide,percent,oldValue);\r\n      \r\n      oldValue=percent;\r\n      percent=(Math.random() * 60) + 20;\r\n      setTimeout(animate,3000);\r\n    };\r\n\r\n    setTimeout(animate,0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='chart'>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","/mnt/c/Projects/react/my-app/src/components/Drawer/Drawer.js",["34","35","36","37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":13},{"ruleId":"43","severity":1,"message":"47","line":10,"column":9,"nodeType":"45","messageId":"46","endLine":10,"endColumn":14},{"ruleId":"43","severity":1,"message":"48","line":77,"column":9,"nodeType":"45","messageId":"46","endLine":77,"endColumn":23},{"ruleId":"43","severity":1,"message":"49","line":16,"column":9,"nodeType":"45","messageId":"46","endLine":16,"endColumn":17},{"ruleId":"43","severity":1,"message":"47","line":17,"column":9,"nodeType":"45","messageId":"46","endLine":17,"endColumn":14},{"ruleId":"43","severity":1,"message":"50","line":18,"column":9,"nodeType":"45","messageId":"46","endLine":18,"endColumn":19},{"ruleId":"43","severity":1,"message":"51","line":22,"column":9,"nodeType":"45","messageId":"46","endLine":22,"endColumn":21},{"ruleId":"43","severity":1,"message":"48","line":41,"column":9,"nodeType":"45","messageId":"46","endLine":41,"endColumn":23},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Meter' is defined but never used.","Identifier","unusedVar","'ratio' is assigned a value but never used.","'pathBackground' is assigned a value but never used.","'oldValue' is assigned a value but never used.","'glowRadius' is assigned a value but never used.","'cornerRadius' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]